#!/usr/bin/perl
use strict;
use warnings;
use feature     qw(say);
use Encode      qw(encode decode);
use POSIX       qw(strftime);
use Term::ReadLine;
use Time::HiRes qw(gettimeofday tv_interval);
use VectorSpaceModel;


my $docs  = shift // 'training.txt';
my $stash = "$docs.stash";


say 'Building index...';
my $start = time;
my $index = InvertedIndex->new;
open my $fh, '<', $docs or die "Couldn't read $docs: $!\n";

say "Trying to unstash $stash...";
unless ($index->unstash($stash))
{
    say "Indexing $docs...";
    for (;;)
    {
        my $id       = tell $fh;
        my $document = <$fh> // last;
        $index->index($id, decode 'UTF-8' => $document);
    }

    say 'Calculating lengths...';
    $index->calculate_lengths;

    say 'Stashing...';
    $index->stash($stash);
}

say strftime 'Index built after %M:%S' => gmtime(time - $start);


my $term = Term::ReadLine->new('InvertedIndex');
while (defined($_ = $term->readline('query: ')))
{
    my @start = gettimeofday;
    my @query = split ' ';

    if (@query)
    {
        my ($actual, $results) = $index->query(decode 'UTF-8' => $_);
        my  $time_taken        = tv_interval(\@start);

        local $SIG{PIPE} = 'IGNORE';
        my $pid = open my $pager, '|-', 'less' or die "Couldn't less: $!\n";

        my $raw       =                 join ' ', @query;
        my $processed = encode 'UTF-8', join ' ', @$actual;

        say {$pager} "Query: $raw ($processed)";
        say {$pager} scalar @$results, " results in $time_taken seconds";
        say {$pager} ' Rank |     ID     | Document';
        for (@$results)
        {
            my ($id, $rank) = @$_;
            seek $fh, $id, 0;
            printf {$pager} '%5.2f | %10d | %s', $rank, $id, scalar <$fh> or last;
        }
        close $pager;

        waitpid $pid, 0;
    }
}


say "\nCleaning up, this may take a bit...";
