#!/usr/bin/perl
use strict;
use warnings;
use feature     qw(say);
use Encode      qw(decode);
use POSIX       qw(strftime);
use Term::ReadLine;
use Time::HiRes qw(gettimeofday tv_interval);
use InvertedIndex;


my $docs  = shift // 'training.txt';
my $stash = "$docs.stash";


say 'Building index...';
my $start = time;
my $index = InvertedIndex->new;
open my $fh, '<', $docs or die "Couldn't read $docs: $!\n";

say "Trying to unstash $stash...";
unless ($index->unstash($stash))
{
    say "Indexing $docs...";
    for (;;)
    {
        my $id       = tell $fh;
        my $document = <$fh> // last;
        $index->index($id, decode 'UTF-8' => $document);
    }

    say 'Stashing...';
    $index->stash($stash);
}

say strftime 'Index built after %M:%S' => gmtime(time - $start);


my $term = Term::ReadLine->new('InvertedIndex');
while (defined($_ = $term->readline('query: ')))
{
    my @start = gettimeofday;
    my @query = split ' ';

    if (@query)
    {
        my ($actual, $results) = $index->query(decode 'UTF-8' => $_);
        my  $time_taken        = tv_interval(\@start);

        local $SIG{PIPE} = 'IGNORE';
        my $pid = open my $pager, '|-', 'less' or die "Couldn't less: $!\n";

        say {$pager} 'Query: ', join(' ', @query), ' (', join(' ', @$actual), ')';
        say {$pager} scalar @$results, " results in $time_taken seconds";
        for (@$results)
        {
            seek $fh, $_->[0], 0;
            print {$pager} $_->[1], "\t", scalar <$fh>;
        }
        close $pager;

        waitpid $pid, 0;
    }
}


say "\nCleaning up, this may take a bit...";
